---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import Services from '../components/Services.astro';
import Clients from '../components/Clients.astro';
import Contact from '../components/Contact.astro';
import '../styles/global.css';
---

<Layout title="Dev Agents - Automatisation IA pour les stacks modernes">
  <!-- Noise texture overlay -->
  <div class="fixed inset-0 opacity-[0.04] pointer-events-none z-10 mix-blend-overlay">
    <svg width="100%" height="100%">
      <filter id="noise">
        <feTurbulence type="fractalNoise" baseFrequency="0.8" numOctaves="4" seed="2" />
        <feColorMatrix type="saturate" values="0"/>
      </filter>
      <rect width="100%" height="100%" filter="url(#noise)" opacity="1"/>
    </svg>
  </div>
  
  <Header />
  <main id="main">
    <Hero />
    <Services />
    <Clients />
    <Contact />
  </main>
  
  <footer class="py-8 border-t border-neutral-900">
    <div class="container mx-auto px-6 text-center">
      <p class="text-neutral-500 text-sm">
        © 2024 Dev Agents. Automatisation discrètement puissante.
      </p>
    </div>
  </footer>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const targetId = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
        if (!targetId || targetId === '#') return;
        
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          const offset = 80; // Account for fixed header
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - offset;
          
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      });
    });
    
    // Add scroll-based animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -100px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fade-up');
        }
      });
    }, observerOptions);
    
    document.querySelectorAll('section').forEach(section => {
      observer.observe(section);
    });
  });
</script>